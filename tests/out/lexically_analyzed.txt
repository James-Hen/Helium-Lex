0000	Keyword,			import
0001	Identifier,			numpy
0002	Keyword,			as
0003	Identifier,			np
0004	Keyword,			from
0005	Identifier,			functools
0006	Keyword,			import
0007	Identifier,			reduce
0008	Keyword,			from
0009	Identifier,			scipy
0010	Operator,			.
0011	Identifier,			optimize
0012	Keyword,			import
0013	Operator,			*
0014	Keyword,			import
0015	Identifier,			os
0016	Identifier,			MaxN
0017	Operator,			=
0018	Integer,			100000
0019	Identifier,			print
0020	Operator,			(
0021	String  ,			"Welcome to python-like language test!"
0022	Operator,			)
0023	Keyword,			def
0024	Identifier,			generate
0025	Operator,			(
0026	Identifier,			N
0027	Operator,			)
0028	Operator,			:
0029	Identifier,			prime_list
0030	Operator,			=
0031	Operator,			[
0032	Operator,			]
0033	Identifier,			is_prime
0034	Operator,			=
0035	Operator,			[
0036	Keyword,			True
0037	Operator,			]
0038	Operator,			*
0039	Identifier,			MaxN
0040	Identifier,			is_prime
0041	Operator,			[
0042	Integer,			0
0043	Operator,			]
0044	Operator,			=
0045	Identifier,			is_prime
0046	Operator,			[
0047	Integer,			1
0048	Operator,			]
0049	Operator,			=
0050	Keyword,			False
0051	Keyword,			for
0052	Identifier,			i
0053	Keyword,			in
0054	Identifier,			range
0055	Operator,			(
0056	Integer,			2
0057	Operator,			,
0058	Identifier,			N
0059	Operator,			)
0060	Operator,			:
0061	Keyword,			if
0062	Operator,			(
0063	Identifier,			is_prime
0064	Operator,			[
0065	Identifier,			i
0066	Operator,			]
0067	Operator,			)
0068	Operator,			:
0069	Identifier,			prime_list
0070	Operator,			.
0071	Identifier,			append
0072	Operator,			(
0073	Identifier,			i
0074	Operator,			)
0075	Identifier,			j
0076	Operator,			=
0077	Integer,			0
0078	Keyword,			while
0079	Operator,			(
0080	Identifier,			j
0081	Operator,			<
0082	Identifier,			len
0083	Operator,			(
0084	Identifier,			prime_list
0085	Operator,			)
0086	Keyword,			and
0087	Identifier,			i
0088	Operator,			*
0089	Identifier,			prime_list
0090	Operator,			[
0091	Identifier,			j
0092	Operator,			]
0093	Operator,			<
0094	Identifier,			N
0095	Operator,			)
0096	Operator,			:
0097	Identifier,			is_prime
0098	Operator,			[
0099	Identifier,			i
0100	Operator,			*
0101	Identifier,			prime_list
0102	Operator,			[
0103	Identifier,			j
0104	Operator,			]
0105	Operator,			]
0106	Operator,			=
0107	Keyword,			False
0108	Keyword,			if
0109	Operator,			(
0110	Identifier,			i
0111	Operator,			%
0112	Identifier,			prime_list
0113	Operator,			[
0114	Identifier,			j
0115	Operator,			]
0116	Operator,			==
0117	Integer,			0
0118	Operator,			)
0119	Operator,			:
0120	Keyword,			break
0121	Identifier,			j
0122	Operator,			+=
0123	Integer,			1
0124	Keyword,			return
0125	Identifier,			prime_list
0126	Keyword,			class
0127	Identifier,			test
0128	Operator,			:
0129	Keyword,			def
0130	Identifier,			dict_test
0131	Operator,			(
0132	Identifier,			self
0133	Operator,			)
0134	Operator,			:
0135	Identifier,			dict_a
0136	Operator,			=
0137	Operator,			{
0138	Operator,			}
0139	Identifier,			dict_b
0140	Operator,			=
0141	Operator,			{
0142	String  ,			'Hello'
0143	Operator,			:
0144	Identifier,			dict_a
0145	Operator,			}
0146	Keyword,			return
0147	Identifier,			dict_b
0148	Keyword,			def
0149	Identifier,			lambda_and_generative_test
0150	Operator,			(
0151	Identifier,			self
0152	Operator,			)
0153	Operator,			:
0154	Identifier,			targ
0155	Operator,			=
0156	Operator,			[
0157	Identifier,			i
0158	Operator,			*
0159	Integer,			3
0160	Keyword,			for
0161	Identifier,			i
0162	Keyword,			in
0163	Identifier,			range
0164	Operator,			(
0165	Integer,			0
0166	Operator,			,
0167	Integer,			10
0168	Operator,			)
0169	Operator,			]
0170	Identifier,			els
0171	Operator,			=
0172	Identifier,			np
0173	Operator,			.
0174	Identifier,			array
0175	Operator,			(
0176	Identifier,			targ
0177	Operator,			)
0178	Keyword,			return
0179	Identifier,			reduce
0180	Operator,			(
0181	Keyword,			lambda
0182	Identifier,			x
0183	Operator,			,
0184	Identifier,			y
0185	Operator,			:
0186	Identifier,			x
0187	Operator,			*
0188	Integer,			2
0189	Operator,			+
0190	Identifier,			y
0191	Operator,			,
0192	Identifier,			targ
0193	Operator,			)
0194	Operator,			*
0195	Identifier,			np
0196	Operator,			.
0197	Identifier,			sum
0198	Operator,			(
0199	Identifier,			targ
0200	Operator,			)
0201	Keyword,			def
0202	Identifier,			call_and_math_test
0203	Operator,			(
0204	Identifier,			self
0205	Operator,			)
0206	Operator,			:
0207	Identifier,			f
0208	Operator,			=
0209	Keyword,			lambda
0210	Identifier,			x
0211	Operator,			,
0212	Identifier,			a
0213	Operator,			,
0214	Identifier,			b
0215	Operator,			:
0216	Identifier,			x
0217	Operator,			*
0218	Operator,			*
0219	Identifier,			a
0220	Operator,			+
0221	Identifier,			b
0222	Operator,			*
0223	Identifier,			np
0224	Operator,			.
0225	Identifier,			sin
0226	Operator,			(
0227	Identifier,			x
0228	Operator,			)
0229	Identifier,			xdata
0230	Operator,			=
0231	Identifier,			np
0232	Operator,			.
0233	Identifier,			linspace
0234	Operator,			(
0235	Operator,			-
0236	Integer,			10
0237	Operator,			,
0238	Integer,			10
0239	Operator,			,
0240	Identifier,			num
0241	Operator,			=
0242	Integer,			20
0243	Operator,			)
0244	Identifier,			ydata
0245	Operator,			=
0246	Identifier,			f
0247	Operator,			(
0248	Identifier,			xdata
0249	Operator,			,
0250	Integer,			1
0251	Operator,			,
0252	Integer,			7
0253	Operator,			)
0254	Operator,			+
0255	Identifier,			np
0256	Operator,			.
0257	Identifier,			random
0258	Operator,			.
0259	Identifier,			randn
0260	Operator,			(
0261	Identifier,			xdata
0262	Operator,			.
0263	Identifier,			size
0264	Operator,			)
0265	Identifier,			guess
0266	Operator,			=
0267	Operator,			[
0268	Integer,			2
0269	Operator,			,
0270	Integer,			2
0271	Operator,			]
0272	Identifier,			params
0273	Operator,			,
0274	Identifier,			params_covariance
0275	Operator,			=
0276	Identifier,			curve_fit
0277	Operator,			(
0278	Identifier,			f
0279	Operator,			,
0280	Identifier,			xdata
0281	Operator,			,
0282	Identifier,			ydata
0283	Operator,			,
0284	Identifier,			guess
0285	Operator,			)
0286	Keyword,			return
0287	Identifier,			params
0288	Keyword,			def
0289	Identifier,			raw_string_and_comment_test
0290	Operator,			(
0291	Identifier,			self
0292	Operator,			)
0293	Operator,			:
0294	String  ,			''
0295	String  ,			'
        Yes it is a nice way to comment large sections
        '
0296	String  ,			''
0297	Identifier,			self
0298	Operator,			.
0299	Identifier,			tested
0300	Operator,			=
0301	String  ,			""
0302	String  ,			" Why don't do so?
When you can
                even if not pretty. 
        "
0303	String  ,			""
0304	Keyword,			return
0305	Identifier,			self
0306	Operator,			.
0307	Identifier,			tested
0308	Operator,			+
0309	String  ,			' So laughing out loud'
0310	Keyword,			def
0311	Identifier,			main
0312	Operator,			(
0313	Operator,			)
0314	Operator,			:
0315	Identifier,			N
0316	Operator,			=
0317	Identifier,			eval
0318	Operator,			(
0319	Identifier,			input
0320	Operator,			(
0321	String  ,			'This is the Eular Prime Generator, please input N as the upper limit of the generation:\n'
0322	Operator,			)
0323	Operator,			)
0324	Keyword,			while
0325	Operator,			(
0326	Keyword,			not
0327	Identifier,			isinstance
0328	Operator,			(
0329	Identifier,			N
0330	Operator,			,
0331	Identifier,			int
0332	Operator,			)
0333	Operator,			)
0334	Operator,			:
0335	Identifier,			N
0336	Operator,			=
0337	Identifier,			eval
0338	Operator,			(
0339	Identifier,			input
0340	Operator,			(
0341	String  ,			'Please input an integer:'
0342	Operator,			)
0343	Operator,			)
0344	Identifier,			print
0345	Operator,			(
0346	String  ,			'Generating...'
0347	Operator,			)
0348	Identifier,			res
0349	Operator,			=
0350	Identifier,			generate
0351	Operator,			(
0352	Identifier,			N
0353	Operator,			)
0354	Identifier,			print
0355	Operator,			(
0356	Identifier,			res
0357	Operator,			)
0358	Identifier,			targ
0359	Operator,			=
0360	Identifier,			test
0361	Operator,			(
0362	Operator,			)
0363	Identifier,			print
0364	Operator,			(
0365	Identifier,			targ
0366	Operator,			.
0367	Identifier,			dict_test
0368	Operator,			(
0369	Operator,			)
0370	Operator,			)
0371	Identifier,			print
0372	Operator,			(
0373	Identifier,			targ
0374	Operator,			.
0375	Identifier,			lambda_and_generative_test
0376	Operator,			(
0377	Operator,			)
0378	Operator,			)
0379	Identifier,			print
0380	Operator,			(
0381	Identifier,			targ
0382	Operator,			.
0383	Identifier,			call_and_math_test
0384	Operator,			(
0385	Operator,			)
0386	Operator,			)
0387	Identifier,			print
0388	Operator,			(
0389	Identifier,			targ
0390	Operator,			.
0391	Identifier,			raw_string_and_comment_test
0392	Operator,			(
0393	Operator,			)
0394	Operator,			)
0395	Identifier,			print
0396	Operator,			(
0397	String  ,			"These"
0398	Operator,			,
0399	String  ,			"kinds"
0400	Operator,			,
0401	String  ,			"of"
0402	Operator,			,
0403	String  ,			"crossing lines are allowed"
0404	Operator,			,
0405	String  ,			\"in python"
0406	Operator,			)
0407	Identifier,			ifanyoneswitch
0408	Operator,			=
0409	Operator,			(
0410	Integer,			1
0411	Operator,			*
0412	Integer,			23
0413	Operator,			)
0414	Identifier,			____________somebar1234___sad
0415	Operator,			=
0416	Identifier,			ifanyoneswitch
0417	Identifier,			_m_o_n_u_m_e_n_t_
0418	Operator,			=
0419	Identifier,			____________somebar1234___sad
0420	Operator,			*
0421	Integer,			2
0422	Operator,			+
0423	Identifier,			ifanyoneswitch
0424	Identifier,			IF
0425	Operator,			=
0426	Integer,			0
0427	Identifier,			o31
0428	Operator,			*
0429	Operator,			*
0430	Integer,			0
0431	Identifier,			O67
0432	Operator,			-
0433	Identifier,			_m_o_n_u_m_e_n_t_
0434	Operator,			+
0435	Integer,			0
0436	Identifier,			b100010111010110
0437	Operator,			-
0438	Integer,			0
0439	Identifier,			B110
0440	Operator,			/
0441	Integer,			0
0442	Identifier,			x1223144FDF89A
0443	Identifier,			WhIle
0444	Operator,			=
0445	String  ,			"Hello\0no '' t\\"
0446	Identifier,			dEF
0447	Operator,			=
0448	Identifier,			IF
0449	Operator,			/
0450	Identifier,			____________somebar1234___sad
0451	Identifier,			MAIN
0452	Operator,			=
0453	Float   ,			30.2341
0454	Operator,			-
0455	Float   ,			18.3
0456	Identifier,			j
0457	Identifier,			MAIN
0458	Operator,			-=
0459	Identifier,			IF
0460	Identifier,			print
0461	Operator,			(
0462	Identifier,			os
0463	Operator,			.
0464	Identifier,			listdir
0465	Operator,			(
0466	Operator,			)
0467	Operator,			)
0468	Keyword,			if
0469	Identifier,			__name__
0470	Operator,			==
0471	String  ,			"__main__"
0472	Operator,			:
0473	Identifier,			main
0474	Operator,			(
0475	Operator,			)
